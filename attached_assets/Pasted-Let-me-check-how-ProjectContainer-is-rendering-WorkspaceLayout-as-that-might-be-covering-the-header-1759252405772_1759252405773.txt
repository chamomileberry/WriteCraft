Let me check how ProjectContainer is rendering WorkspaceLayout, as that might be covering the header:I see the issue! Looking at your ProjectContainer code, it wraps everything in `WorkspaceLayout`, and WorkspaceLayout uses `h-full` which can cause layout issues. The problem is that WorkspaceLayout is expanding to fill the full viewport and potentially covering the header.

Let me check if there's an absolute positioning issue:The issue is subtle. Since your code looks correct, let's try a different approach. Instead of trying to add the Header outside ProjectContainer, let's **move the Header inside ProjectContainer** where it has better control over the layout. This is how ProjectViewer already does it successfully.

Update **`client/src/components/ProjectContainer.tsx`** - find the return statement and modify it like this:

```tsx
return (
  <WorkspaceLayout
    projectInfo={{
      id: projectId,
      title: project?.title || 'Untitled Project',
      onRename: (newTitle) => renameProjectMutation.mutate(newTitle),
    }}
  >
    <div className="flex flex-col h-full bg-background">
      {/* Add navigation header here */}
      <div className="border-b bg-background/95 backdrop-blur flex-shrink-0">
        <div className="flex items-center justify-between px-4 py-3">
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="sm" onClick={onBack} data-testid="button-back-to-projects">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Projects
            </Button>
            <div className="h-4 w-px bg-border" />
            <h1 className="text-lg font-semibold">
              {project?.title || 'Untitled Project'}
            </h1>
          </div>
        </div>
      </div>

      {/* Original content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left Sidebar - Outline only */}
        <div className="w-64 border-r flex-shrink-0 overflow-hidden">
          <ProjectOutline
            projectId={projectId}
            sections={sections}
            activeSectionId={activeSectionId}
            onSectionClick={handleSectionClick}
          />
        </div>

        {/* Main Content Area */}
        <div className="flex-1 flex flex-col overflow-hidden">
          {/* ProjectHeader stays here */}
          <ProjectHeader
            project={project}
            breadcrumb={breadcrumb}
            wordCount={wordCount}
            saveStatus={saveStatus}
            lastSaveTime={lastSaveTime}
            onBack={onBack}
            onManualSave={handleManualSave}
            isSaving={saveStatus === 'saving'}
          />

          {/* Editor or Empty State */}
          {showEditor ? (
            <SectionEditor
              ref={sectionEditorRef}
              projectId={projectId}
              section={activeSection}
              onContentChange={(changes) => {
                setHasUnsavedChanges(changes);
                if (!changes) {
                  setSaveStatus('saved');
                }
              }}
              onSaveStatusChange={setSaveStatus}
              onLastSaveTimeChange={setLastSaveTime}
              onWordCountChange={setWordCount}
            />
          ) : showEmptyState ? (
            <div className="flex-1 flex items-center justify-center text-center p-8">
              <div>
                <h3 className="text-lg font-semibold mb-2">No page selected</h3>
                <p className="text-sm text-muted-foreground">
                  Select a page from the outline to start writing, or create a new page.
                </p>
              </div>
            </div>
          ) : isLoadingSection ? (
            <div className="flex-1 flex items-center justify-center">
              <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
            </div>
          ) : null}
        </div>
      </div>
    </div>
  </WorkspaceLayout>
);
```

And add these imports at the top of ProjectContainer.tsx:
```tsx
import { Button } from '@/components/ui/button';
import { ArrowLeft } from 'lucide-react';
```

Then **simplify `client/src/pages/ProjectEditPageWithSidebar.tsx`** back to:

```tsx
import { useLocation } from 'wouter';
import { ProjectContainer } from '@/components/ProjectContainer';

interface ProjectEditPageWithSidebarProps {
  params: { id: string };
}

export default function ProjectEditPageWithSidebar({ params }: ProjectEditPageWithSidebarProps) {
  const [, setLocation] = useLocation();

  const handleBack = () => {
    setLocation('/projects');
  };

  return (
    <div className="h-screen bg-background">
      <ProjectContainer 
        projectId={params.id}
        onBack={handleBack}
      />
    </div>
  );
}
```

This approach:
- ✅ Puts the navigation inside ProjectContainer (where layout is controlled)
- ✅ Keeps tabs working (no changes to WorkspaceLayout)
- ✅ Matches the pattern ProjectViewer uses successfully
- ✅ Simpler and more reliable