// Example of how to update your ProjectsPage or routing to support view/edit modes

import { useState } from 'react';
import { ProjectViewer } from './ProjectViewer';
import { ProjectContainer } from './ProjectContainer';
import { ProjectsList } from './ProjectsList'; // Your existing projects list component

type ViewMode = 'list' | 'view' | 'edit';

export function ProjectsPage() {
  const [viewMode, setViewMode] = useState<ViewMode>('list');
  const [selectedProjectId, setSelectedProjectId] = useState<string | null>(null);

  // Handle clicking a project card (not the edit button)
  const handleProjectClick = (projectId: string) => {
    setSelectedProjectId(projectId);
    setViewMode('view');
  };

  // Handle clicking the edit button on a project card
  const handleProjectEdit = (projectId: string) => {
    setSelectedProjectId(projectId);
    setViewMode('edit');
  };

  // Handle clicking "Edit Project" button in viewer
  const handleStartEditing = () => {
    setViewMode('edit');
  };

  // Handle back navigation
  const handleBack = () => {
    setSelectedProjectId(null);
    setViewMode('list');
  };

  // Handle going from edit mode back to view mode
  const handleBackToView = () => {
    setViewMode('view');
  };

  return (
    <div className="h-full">
      {viewMode === 'list' && (
        <ProjectsList
          onProjectClick={handleProjectClick}
          onProjectEdit={handleProjectEdit}
        />
      )}

      {viewMode === 'view' && selectedProjectId && (
        <ProjectViewer
          projectId={selectedProjectId}
          onBack={handleBack}
          onEdit={handleStartEditing}
        />
      )}

      {viewMode === 'edit' && selectedProjectId && (
        <ProjectContainer
          projectId={selectedProjectId}
          onBack={handleBack} // Or use handleBackToView if you want to go back to viewer instead
        />
      )}
    </div>
  );
}

// ============================================
// Update your ProjectsList component
// ============================================

interface ProjectsListProps {
  onProjectClick: (projectId: string) => void;
  onProjectEdit: (projectId: string) => void;
}

export function ProjectsList({ onProjectClick, onProjectEdit }: ProjectsListProps) {
  // Your existing projects list code...

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-6">
      {projects.map((project) => (
        <div
          key={project.id}
          className="border rounded-lg p-4 hover:border-primary transition-colors cursor-pointer"
          onClick={() => onProjectClick(project.id)} // Click card to view
        >
          <h3 className="text-lg font-semibold mb-2">{project.title}</h3>
          <p className="text-sm text-muted-foreground mb-4">
            {project.description || 'No description'}
          </p>
          
          <div className="flex items-center justify-between">
            <span className="text-xs text-muted-foreground">
              Updated {formatDistanceToNow(new Date(project.updatedAt))} ago
            </span>
            
            {/* Edit button - stops propagation so it doesn't trigger card click */}
            <Button
              size="sm"
              variant="outline"
              onClick={(e) => {
                e.stopPropagation(); // Prevent card click
                onProjectEdit(project.id); // Go straight to edit mode
              }}
            >
              <Edit className="h-4 w-4 mr-2" />
              Edit
            </Button>
          </div>
        </div>
      ))}
    </div>
  );
}

// ============================================
// Alternative: Using React Router
// ============================================

// If you're using React Router, you can use routes instead:
import { Routes, Route, useNavigate, useParams } from 'react-router-dom';

export function ProjectsRoutes() {
  return (
    <Routes>
      <Route path="/" element={<ProjectsListWithRouter />} />
      <Route path="/:projectId" element={<ProjectViewerWithRouter />} />
      <Route path="/:projectId/edit" element={<ProjectEditorWithRouter />} />
    </Routes>
  );
}

function ProjectsListWithRouter() {
  const navigate = useNavigate();

  return (
    <ProjectsList
      onProjectClick={(id) => navigate(`/projects/${id}`)}
      onProjectEdit={(id) => navigate(`/projects/${id}/edit`)}
    />
  );
}

function ProjectViewerWithRouter() {
  const { projectId } = useParams();
  const navigate = useNavigate();

  return (
    <ProjectViewer
      projectId={projectId!}
      onBack={() => navigate('/projects')}
      onEdit={() => navigate(`/projects/${projectId}/edit`)}
    />
  );
}

function ProjectEditorWithRouter() {
  const { projectId } = useParams();
  const navigate = useNavigate();

  return (
    <ProjectContainer
      projectId={projectId!}
      onBack={() => navigate('/projects')}
    />
  );
}