So we need to update the import feature to also handle Campfire's module-by-module JSON exports, which means we need to shift from a "single ZIP file" mindset to a "multiple JSON files" combined approach.
The core change is to allow the user to upload a batch of files at once and then have the server process each one. Here are the specific changes required for each part of the application:
1. Client-Side: ImportPage.tsx
The current UI is set up to handle a single file. We need to modify the file input to accept multiple files and adjust the upload logic to send them as a collection.
• Allow Multiple Files: Add the multiple attribute to the <input type="file" />. This allows users to select more than one file from the file dialog.
• Update State to Handle an Array: The file state, managed by useState, should be initialized to an array ([]) instead of null. The onChange handler will now set the state to e.target.files, which is a FileList object.
• Send FormData Correctly: When we append the files to the FormData object, we must loop through the file list and append each one. The server-side middleware (Multer) will automatically assemble these into an array if they share the same field name.

2. Server-Side Route: import.routes.ts
The server route needs to be configured to accept and process an array of files instead of a single one. This is a simple change in the Multer middleware configuration.
Key Change:
• Switch from upload.single() to upload.array(): Change the Multer middleware on the import route. upload.array('importFile') tells Multer to expect multiple files under the field name importFile and to make them available as an array at req.files.
3. Server-Side Repository: import.repository.ts
The current repository is built to unzip a file and then process its contents. The new logic must handle both the old ZIP path and the new Campfire JSON path.
Key Changes:
1. Detect File Type: The first step in the importFromWorldAnvil method should be to check the mimetype of the uploaded file(s). If it's a application/zip, use the existing unzip logic. If it's application/json, use the new Campfire logic.
2. Iterate and Process JSON Files: When JSON files are detected, we'll need to loop through the req.files array.
3. Identify Module from Content: Since Campfire files aren't named in a standard way, we'll need to read the content of each JSON file to figure out what it contains (characters, locations, etc.). We can do this by inspecting the keys of the JSON objects inside the file. For example, if an object has keys like "name", "description", and "age", it's likely a character file.
4. Process and Insert Data: Based on the identified module, we'll call the appropriate repository method to insert the data into the database.