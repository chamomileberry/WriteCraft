Okay, you've got your menu. But how do you wire things up?

Commands

You've got the editor running already and want to add your first button. You need a <button> HTML tag with a click handler. Depending on your setup, that can look like the following example:

<button onclick="editor.chain().focus().toggleBold().run()">Bold</button>

Oh, that's a long command, right? Actually, it's a chain of commands. Let's go through this one by one:

editor.chain().focus().toggleBold().run()

editor should be a Tiptap instance,
chain() is used to tell the editor you want to execute multiple commands,
focus() sets the focus back to the editor,
toggleBold() marks the selected text bold. If the text is already bold, it removes the bold mark.
run() will execute the chain.
In other words: This will be a typical Bold button for your text editor.

The available commands depend on the extensions registered with the editor. Most extensions come with a set…(), unset…(), and toggle…() command. Read the extension documentation to see what's actually available or just surf through your code editor's autocomplete.

Keep the focus

You have already seen the focus() command in the above example. When you click on the button, the browser focuses that DOM element and the editor loses focus. It's likely you want to add focus() to all your menu buttons, so the writing flow of your users isn't interrupted.

The active state

The editor provides an isActive() method to check if something is applied to the selected text already. In Vue.js you can toggle a CSS class with help of that function:

Important: If you are using React, values from the editor state are not automatically reactive to avoid performance issues, that means the isActive() value will always return the value of the initial editor state. To subscribe to the editor state you can use the useEditorState hook as described here.

<button
  :class="{ 'is-active': editor.isActive('bold') }"
  @click="editor.chain().focus().toggleBold().run()"
>
  Bold
</button>

This toggles the .is-active class for nodes and marks. You can even check for specific attributes. Here is an example with the Highlight mark that ignores different attributes:

editor.isActive('highlight')

And an example that compares the given attribute(s):

editor.isActive('highlight', { color: '#ffa8a8' })

There is even support for regular expressions:

editor.isActive('textStyle', { color: /.*/ })

You can even check nodes and marks, but check for the attributes only. Here is an example with the TextAlign extension:

editor.isActive({ textAlign: 'right' })

If your selection spans multiple nodes or marks, or only part of the selection has a mark, isActive() will return false and indicate nothing is active. This behavior is intentional, as it allows users to apply a new node or mark to the selection right away.

User experience

When designing a great user experience you should consider a few things.

Accessibility

Make sure users can navigate the menu with their keyboard
Use title attributes
Use ARIA attributes
List available keyboard shortcuts