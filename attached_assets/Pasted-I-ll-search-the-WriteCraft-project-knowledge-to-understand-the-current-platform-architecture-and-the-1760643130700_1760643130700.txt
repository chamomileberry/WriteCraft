I'll search the WriteCraft project knowledge to understand the current platform architecture and then provide tailored recommendations based on the timeline orientation research.Based on my review of WriteCraft's current timeline implementation and the comprehensive research on timeline orientations, here are my recommendations:

## Current State Analysis

WriteCraft currently has:
- **List View**: Vertical chronological list (Material Design-style timeline)
- **Canvas View**: Horizontal axis with ReactFlow nodes positioned above/below
- Database support for timeline events, relationships, positioning, and metadata
- View mode settings (`viewMode`: 'list', 'visual', 'gantt')

## Key Recommendations

### 1. **Keep Both Views, But Enhance Their Distinct Purposes**

Your dual-view approach aligns perfectly with the research findings:

**List View (Vertical)** - Optimize for:
- âœ… **Mobile-first consumption** - This should be the default on mobile devices
- âœ… **High information density** - Writers tracking 50-500+ events
- âœ… **Sequential reading** - Character lifespans, world histories spanning centuries
- ðŸ“± **Recommendation**: Make this the primary view for mobile, ensure excellent scrolling performance

**Canvas View (Horizontal)** - Optimize for:
- âœ… **Desktop editing and visualization** - Comparative analysis of parallel events
- âœ… **Story structure planning** - Seeing how character arcs intersect with world events
- âœ… **Relationship mapping** - Visual connections between events
- ðŸ’» **Recommendation**: Emphasize this is a *workspace* for understanding temporal relationships

### 2. **Implement a Third View: Gantt-Style Timeline**

The research strongly supports adding this for specific use cases:

```typescript
// You already have 'gantt' in your viewMode enum!
viewMode: text("view_mode").default('list'), // 'list', 'visual', or 'gantt'
```

**Gantt View** should be:
- **Horizontal timeline** with event bars showing duration
- **Multiple rows/tracks** for different categories (characters, factions, locations)
- **Best for**: Campaign session planning (5-15 events), character age tracking, seeing parallel storylines
- **Similar to**: LegendKeeper's Gantt View or Aeon Timeline's Timeline View

### 3. **Mobile-Responsive Strategy**

Based on the research (users *hate* horizontal scrolling on mobile):

```typescript
// Component logic recommendation
const isMobile = useMediaQuery('(max-width: 768px)');
const defaultView = isMobile ? 'list' : timeline.viewMode || 'list';
```

- **Force List View on mobile** - Don't allow Canvas or Gantt views on small screens
- **Show informational banner**: "Canvas view is optimized for desktop. Use List view on mobile."
- **Auto-switch on resize**: If user switches to mobile mid-session, gracefully transition to List view

### 4. **Enhance List View with "Timescale Mode"**

Inspired by World Anvil's approach:

Add a toggle in List View between:
- **Compact Mode** (current): Events listed equally spaced, good for dense timelines
- **Timescale Mode** (new): Vertical spacing proportional to actual time gaps

```typescript
// Schema addition
export const timelines = pgTable("timelines", {
  // ... existing fields
  listViewMode: text("list_view_mode").default('compact'), // 'compact' or 'timescale'
  // ...
});
```

This addresses the research finding that showing "time as distance" is crucial for worldbuilding spanning millennia.

### 5. **Add Timeline Type Templates**

Guide users to choose appropriate orientations based on use case:

```typescript
const timelineTemplates = {
  worldHistory: {
    defaultView: 'list',
    timeScale: 'centuries',
    suggested: 'Best for tracking civilizations over millennia',
  },
  campaignSessions: {
    defaultView: 'gantt',
    timeScale: 'days',
    suggested: 'Best for RPG session tracking (5-15 sessions)',
  },
  characterBiography: {
    defaultView: 'list',
    timeScale: 'years',
    suggested: 'Best for individual character lifespans',
  },
  plotStructure: {
    defaultView: 'gantt',
    timeScale: 'chapters',
    suggested: 'Best for comparing multiple story arcs',
  },
};
```

### 6. **Canvas View Improvements**

Your current Canvas View is innovative but could be optimized:

**Current**: Horizontal axis with alternating nodes above/below
**Research insight**: This fights against vertical scrolling expectations

**Recommendation**: 
- Keep the horizontal axis visualization *but* make the canvas **tall** (vertical scrolling)
- Allow **unlimited vertical space** for parallel tracks
- Add **swim lanes** for categories (characters, locations, factions)
- Think: "Horizontal timeline axis, but scrolled vertically through time"

```typescript
// Modified canvas dimensions
const CANVAS_WIDTH = 2000;  // Narrower for readability
const CANVAS_HEIGHT = 5000; // Much taller for vertical scroll
const VERTICAL_SPACING = 200; // Space between swim lanes
```

### 7. **Performance Optimization for Large Timelines**

Based on WorldAnvil supporting 250,000 year timelines:

```typescript
// Implement virtualization for List View
import { useVirtualizer } from '@tanstack/react-virtual';

// Only render visible events in canvas
const visibleEvents = events.filter(event => 
  isInViewport(event, viewport)
);
```

### 8. **Export Options**

Add exports respecting orientation context:

- **List View** â†’ Export to vertical Markdown/PDF (reading format)
- **Canvas View** â†’ Export to PNG/SVG (wide, landscape, for presentations)
- **Gantt View** â†’ Export to horizontal PDF (landscape, like Aeon Timeline)

## Priority Implementation Order

**Phase 1** (High Impact, Low Effort):
1. Make List View default on mobile with forced behavior
2. Add visual feedback in Canvas View: "Best viewed on desktop"
3. Implement timeline type templates on creation

**Phase 2** (Medium Effort, High Value):
1. Build Gantt View for campaign/plotting use cases
2. Add Timescale Mode to List View
3. Implement swim lanes in Canvas View

**Phase 3** (Polish):
1. Virtualization for performance
2. Export options per view
3. View-specific tutorials

## Key Principle

The research is clear: **There is no "best" orientationâ€”only context-appropriate choices**. WriteCraft should:
- âœ… Default to vertical (List View) for mobile and general consumption
- âœ… Offer horizontal (Canvas/Gantt) for desktop planning and analysis
- âœ… Guide users to the right view for their specific workflow

Your existing dual-view architecture is excellent foundationâ€”you just need to strengthen each view's particular strengths and guide users appropriately.